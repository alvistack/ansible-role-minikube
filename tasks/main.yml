---

# (c) Wong Hoi Sing Edison <hswong3i@pantarei-design.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: include default variables
  include_vars: "../vars/main.yml"
  tags: minikube

- name: include release specific variables
  include_vars: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "../vars"
  ignore_errors: true
  tags: minikube

- name: include release specific tasks
  include_tasks: "{{ lookup('first_found', _params) }}"
  vars:
    _params:
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
      paths:
        - "."
  ignore_errors: true
  tags: minikube

- name: prepare directories
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
    state: "{{ item.state | default('directory') }}"
  loop:
    - { dest: "/etc/kubernetes" }
    - { dest: "/etc/kubernetes/addons" }
    - { dest: "/etc/kubernetes/manifests" }
    - { dest: "/root/.minikube/config" }
    - { dest: "/usr/local/bin" }
    - { dest: "{{ minikube_download.dest | dirname }}" }
  tags: minikube

- name: download archive
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    checksum: "{{ item.checksum }}"
  loop:
    - "{{ minikube_download }}"
  register: get_url_result
  until: get_url_result is succeeded
  tags: minikube

- name: unarchive package
  shell: |
    set -o pipefail
    cd /usr/local/bin
    TMP_DIR="`mktemp -d`" && cp {{ minikube_download.dest }} $TMP_DIR/minikube && mv $TMP_DIR/minikube . && rm -rf $TMP_DIR
  args:
    executable: "/bin/bash"
  when: get_url_result is changed
  tags: minikube

- name: copy templates
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src | default('./templates' + item.dest + '.j2') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
  loop:
    - { dest: "/root/.minikube/config/config.json" }
  tags: minikube

- name: prepare files
  file:
    dest: "{{ item.dest }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0644') }}"
    state: "{{ item.state | default('file') }}"
  loop:
    - { dest: "/root/.minikube/config/config.json" }
    - { dest: "/usr/local/bin/minikube", mode: "0755" }
  tags: minikube

- name: start services
  service:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  loop:
    - { state: "started", name: "docker" }
  changed_when: false
  ignore_errors: true
  tags: minikube

- name: minikube start
  shell: |
    set -o pipefail
    minikube start \
      --apiserver-port={{ kube_apiserver_bind_port }} \
      --extra-config=controller-manager.allocate-node-cidrs=true \
      --extra-config=controller-manager.cluster-cidr={{ kubernetes_pod_subnet }} \
      --extra-config=kubeadm.ignore-preflight-errors=FileContent--proc-sys-net-bridge-bridge-nf-call-iptables,SystemVerification \
      --extra-config=kubelet.cgroup-driver={{ kubelet_cgroup_driver }} \
      --extra-config=kubelet.kubelet-cgroups={{ kubelet_kubelet_cgroups }} \
      --extra-config=kubelet.network-plugin=cni \
      --extra-config=kubelet.pod-cidr={{ kubernetes_pod_subnet }} \
      --extra-config=kubelet.resolv-conf={{ kubelet_resolv_conf }} \
      --extra-config=kubelet.runtime-cgroups={{ kubelet_runtime_cgroups }} \
      --kubernetes-version={{ kubernetes_version }} \
      --network-plugin=cni \
      --vm-driver=none
  args:
    executable: "/bin/bash"
  register: result
  until: result is succeeded
  changed_when: result is not succeeded
  ignore_errors: true
  tags: minikube
